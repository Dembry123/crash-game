{"ast":null,"code":"var _jsxFileName = \"/Users/dylanembry/Projects/crash-game/client/src/CrashGame.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport io from 'socket.io-client';\nimport CryptoJS from 'crypto-js'; // Added for client-side cryptographic verification (install via npm i crypto-js if needed)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SOCKET_URL = 'http://localhost:3001';\nfunction CrashGame() {\n  _s();\n  const [balance, setBalance] = useState(1000);\n  const [bet, setBet] = useState(10);\n  const [multiplier, setMultiplier] = useState(1);\n  const [phase, setPhase] = useState('waiting');\n  const [countdown, setCountdown] = useState(10);\n  const [hasBet, setHasBet] = useState(false);\n  const [userName, setUserName] = useState('');\n  const [nameInput, setNameInput] = useState('');\n  const [leaderboard, setLeaderboard] = useState([]);\n  const [recentCrashes, setRecentCrashes] = useState([]);\n  const canvasRef = useRef(null);\n  const timeRef = useRef(0);\n  const particlesRef = useRef([]);\n  const socket = useRef(null);\n  const lastMultiplierRef = useRef(1);\n  const lastUpdateTimeRef = useRef(Date.now());\n  const [crashMultiplier, setCrashMultiplier] = useState(0);\n  const [roundId, setRoundId] = useState(0);\n  const [serverSeedHash, setServerSeedHash] = useState('');\n  const [revealedServerSeed, setRevealedServerSeed] = useState('');\n  const CANVAS_WIDTH = 840;\n  const CANVAS_HEIGHT = 560;\n  const SCALE = 2;\n  const FACTOR_X = CANVAS_WIDTH / 6;\n  const FACTOR_Y = CANVAS_HEIGHT / 4;\n  const MARGIN = 35;\n  const updateParticles = useCallback((worldX, worldY) => {\n    if (phase === 'running' && particlesRef.current.length < 200) {\n      for (let i = 0; i < 4; i++) {\n        particlesRef.current.push({\n          worldX: worldX + (Math.random() - 0.5) * 20,\n          worldY: worldY - 20,\n          vx: (Math.random() - 0.5) * 4,\n          vy: -(2 + Math.random() * 4),\n          life: 1.0\n        });\n      }\n    }\n  }, [phase]);\n  useEffect(() => {\n    socket.current = io(SOCKET_URL);\n    socket.current.on('gameUpdate', data => {\n      setPhase(data.phase);\n      setMultiplier(data.multiplier);\n      setBalance(data.balance);\n      setCountdown(data.countdown || 0);\n      setUserName(data.name || '');\n    });\n    socket.current.on('userUpdate', data => {\n      setBalance(data.balance);\n      setUserName(data.name || '');\n    });\n    socket.current.on('multiplierUpdate', newMultiplier => {\n      setMultiplier(newMultiplier);\n      lastMultiplierRef.current = newMultiplier;\n      lastUpdateTimeRef.current = Date.now();\n    });\n    socket.current.on('waitingPhase', ({\n      countdown,\n      roundId,\n      serverSeedHash\n    }) => {\n      setPhase('waiting');\n      setMultiplier(1);\n      setCrashMultiplier(0); // Reset for next round\n      lastMultiplierRef.current = 1;\n      lastUpdateTimeRef.current = Date.now();\n      setCountdown(countdown);\n      setHasBet(false);\n      timeRef.current = 0;\n      particlesRef.current = [];\n      setRoundId(roundId);\n      setServerSeedHash(serverSeedHash);\n      setRevealedServerSeed(''); // Reset revealed seed for new round\n    });\n    socket.current.on('gameStarted', () => {\n      setPhase('running');\n    });\n    socket.current.on('gameCrashed', ({\n      crashPoint,\n      serverSeed\n    }) => {\n      setPhase('crashed');\n      setCrashMultiplier(crashPoint);\n      setRevealedServerSeed(serverSeed);\n    });\n    socket.current.on('recentCrashes', crashes => {\n      setRecentCrashes(crashes); // Receive initial crash history from server\n    });\n    socket.current.on('recentCrashesUpdate', crashes => {\n      setRecentCrashes(crashes); // Update crash history after each crash\n    });\n    socket.current.on('balanceUpdate', newBalance => setBalance(newBalance));\n    socket.current.on('cashOutSuccess', ({\n      multiplier,\n      winnings\n    }) => {\n      alert(`Cashed out at ${multiplier.toFixed(2)}x! Won $${winnings.toFixed(2)}`);\n    });\n    socket.current.on('leaderboardUpdate', lb => setLeaderboard(lb));\n    socket.current.on('countdownUpdate', newCountdown => {\n      setCountdown(newCountdown);\n    });\n    return () => socket.current.disconnect();\n  }, []);\n\n  /*\n   * Handle one-time explosion particle creation when phase changes to 'crashed'.\n   * Particles are added at the fixed crash position based on the crashMultiplier.\n   */\n  useEffect(() => {\n    if (phase === 'crashed') {\n      const t = crashMultiplier - 1;\n      const worldX = t * FACTOR_X;\n      const worldY = Math.pow(t, 1.5) * (FACTOR_Y / 2);\n      for (let i = 0; i < 400; i++) {\n        particlesRef.current.push({\n          worldX: worldX + (Math.random() - 0.5) * 40,\n          worldY: worldY + (Math.random() - 0.5) * 40,\n          vx: (Math.random() - 0.5) * 10,\n          vy: (Math.random() - 0.5) * 10,\n          life: 1.0\n        });\n      }\n    }\n  }, [phase, crashMultiplier, FACTOR_X, FACTOR_Y]);\n\n  /*\n   * Added provably fair verification logic:\n   * - Triggers after crash when revealedServerSeed is set.\n   * - First, recomputes the SHA-256 hash of the revealed seed and checks if it matches the pre-committed serverSeedHash.\n   * - Then, recomputes the crash point using HMAC-SHA256 (with seed as key, roundId as message).\n   * - Extracts first 8 hex chars as integer, normalizes to [0,1), scales to [1,10).\n   * - Compares the computed crash point to the server-provided crashMultiplier (with floating-point tolerance).\n   * - Logs success or failure to console; in production, this could be shown in UI (e.g., a verification modal).\n   */\n  useEffect(() => {\n    if (phase === 'crashed' && revealedServerSeed) {\n      // Recompute commitment hash\n      const computedHash = CryptoJS.SHA256(revealedServerSeed).toString(CryptoJS.enc.Hex);\n      if (computedHash !== serverSeedHash) {\n        console.error('Verification failed: Hash mismatch!');\n        return;\n      }\n      // Recompute crash point (duplicate of server formula)\n      const hmac = CryptoJS.HmacSHA256(roundId.toString(), revealedServerSeed);\n      const hash = hmac.toString(CryptoJS.enc.Hex);\n      const intValue = parseInt(hash.substr(0, 8), 16);\n      const normalized = intValue / 0xffffffff; // 0xffffffff is 2^32 - 1\n      const computedCrash = 1 + normalized * 9;\n      if (Math.abs(computedCrash - crashMultiplier) > 0.01) {\n        console.error('Verification failed: Crash point mismatch!');\n      } else {\n        console.log('Provably fair verification passed!');\n      }\n    }\n  }, [phase, revealedServerSeed, serverSeedHash, roundId, crashMultiplier]);\n  const setMyName = () => {\n    if (nameInput.trim()) {\n      socket.current.emit('setName', nameInput.trim());\n      setNameInput('');\n    }\n  };\n  const placeBet = () => {\n    if (phase !== 'waiting' || bet > balance || bet <= 0 || hasBet || !userName) return;\n    socket.current.emit('placeBet', bet);\n    setHasBet(true);\n  };\n  const cashOut = () => {\n    if (phase !== 'running' || !hasBet) return;\n    socket.current.emit('cashOut');\n  };\n  useEffect(() => {\n    let frameId;\n    const animate = () => {\n      if (!canvasRef.current) return;\n      const ctx = canvasRef.current.getContext('2d');\n      let estimatedMultiplier = multiplier;\n      let endMultiplier = multiplier;\n      let end_t = 0;\n      if (phase === 'running') {\n        const now = Date.now();\n        const timeSinceLastUpdate = (now - lastUpdateTimeRef.current) / 1000;\n        estimatedMultiplier = lastMultiplierRef.current + timeSinceLastUpdate * 0.1;\n        endMultiplier = estimatedMultiplier;\n      } else if (phase === 'crashed') {\n        endMultiplier = crashMultiplier;\n      }\n      end_t = endMultiplier - 1;\n\n      // Generate trail points on the fly (deterministic curve)\n      const numPoints = 200; // Adjustable; enough for smoothness without performance hit\n      const tempTrail = [];\n      const ti = 0;\n      if (end_t > 0 && (phase === 'running' || phase === 'crashed')) {\n        for (let i = 0; i <= numPoints; i++) {\n          const ti = i / numPoints * end_t;\n          const wx = ti * FACTOR_X;\n          const wy = Math.pow(ti, 1.5) * (FACTOR_Y / 2);\n          tempTrail.push({\n            worldX: wx,\n            worldY: wy\n          });\n        }\n      }\n      let worldX = 0;\n      let worldY = 0;\n      if (end_t > 0) {\n        worldX = end_t * FACTOR_X;\n        worldY = Math.pow(ti, 1.5) * (FACTOR_Y / 2);\n      }\n      let zoomScale = 1;\n      if (worldX > 0 && worldY > 0) {\n        const scaleX = (CANVAS_WIDTH - MARGIN) / worldX;\n        const scaleY = (CANVAS_HEIGHT - MARGIN) / worldY;\n        zoomScale = Math.min(1, Math.min(scaleX, scaleY));\n      }\n      ctx.clearRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n      ctx.beginPath();\n      ctx.moveTo(0, CANVAS_HEIGHT);\n      ctx.lineTo(CANVAS_WIDTH, CANVAS_HEIGHT);\n      ctx.moveTo(0, CANVAS_HEIGHT);\n      ctx.lineTo(0, 0);\n      ctx.strokeStyle = '#fff';\n      ctx.lineWidth = SCALE * zoomScale;\n      ctx.stroke();\n\n      // Draw the trail using tempTrail\n      ctx.beginPath();\n      ctx.strokeStyle = '#fff';\n      ctx.lineWidth = 4 * zoomScale;\n      tempTrail.forEach((point, i) => {\n        const drawX = point.worldX * zoomScale;\n        const drawY = CANVAS_HEIGHT - point.worldY * zoomScale;\n        if (i === 0) ctx.moveTo(drawX, drawY);else ctx.lineTo(drawX, drawY);\n      });\n      ctx.stroke();\n\n      // Draw rocket only if running (at end position)\n      if (phase === 'running') {\n        const drawRocketX = worldX * zoomScale;\n        const drawRocketY = CANVAS_HEIGHT - worldY * zoomScale;\n        ctx.beginPath();\n        ctx.arc(drawRocketX, drawRocketY, 10 * zoomScale, 0, Math.PI * 2);\n        ctx.fillStyle = '#fff';\n        ctx.fill();\n      }\n      particlesRef.current.forEach(p => {\n        const drawX = p.worldX * zoomScale;\n        const drawY = CANVAS_HEIGHT - p.worldY * zoomScale;\n        ctx.beginPath();\n        ctx.arc(drawX, drawY, Math.max(0, 6 * p.life) * zoomScale, 0, Math.PI * 2);\n        ctx.fillStyle = `rgba(255, 128, 0, ${Math.max(0, p.life)})`;\n        ctx.fill();\n      });\n      if (phase === 'running') {\n        updateParticles(worldX, worldY);\n      }\n      particlesRef.current.forEach(p => {\n        p.worldX += p.vx;\n        p.worldY += p.vy;\n        p.life -= 0.02;\n      });\n      particlesRef.current = particlesRef.current.filter(p => p.life > 0);\n\n      // Draw recent crash cards\n      const cardWidth = 42;\n      const cardHeight = 17.5;\n      const spacing = 7;\n      const marginRight = 7;\n      const marginTop = 7;\n      const numCards = recentCrashes.length;\n      const totalWidth = numCards * cardWidth + (numCards - 1) * spacing;\n      let startX = CANVAS_WIDTH - totalWidth - marginRight;\n      for (let i = 0; i < numCards; i++) {\n        const x = startX + i * (cardWidth + spacing);\n        const y = marginTop;\n        ctx.fillStyle = 'white';\n        ctx.fillRect(x, y, cardWidth, cardHeight);\n        ctx.strokeStyle = 'orange';\n        ctx.lineWidth = 1.4;\n        ctx.strokeRect(x, y, cardWidth, cardHeight);\n        const multi = recentCrashes[i];\n        const text = `${multi.toFixed(2)}x`;\n        ctx.font = '10px Arial';\n        ctx.fillStyle = 'green';\n        const textWidth = ctx.measureText(text).width;\n        ctx.fillText(text, x + (cardWidth - textWidth) / 2, y + cardHeight / 2 + 3.5);\n      }\n\n      // Draw the dynamic text (multiplier or countdown) in the middle of the canvas\n      let displayText = '';\n      if (phase === 'running') {\n        displayText = `${estimatedMultiplier.toFixed(2)}x`;\n      } else if (phase === 'crashed') {\n        displayText = `Crashed at ${crashMultiplier.toFixed(2)}x`;\n      } else if (phase === 'waiting') {\n        displayText = `${countdown}s`;\n      }\n      if (displayText) {\n        ctx.font = 'bold 48px Arial';\n        ctx.fillStyle = phase === 'crashed' ? '#ff0000' : '#ffffff'; // Red for crashed, white otherwise\n        ctx.textAlign = 'center';\n        ctx.fillText(displayText, CANVAS_WIDTH / 2, CANVAS_HEIGHT / 2);\n      }\n      frameId = requestAnimationFrame(animate);\n    };\n    frameId = requestAnimationFrame(animate);\n    return () => cancelAnimationFrame(frameId);\n  }, [phase, multiplier, crashMultiplier, updateParticles, recentCrashes, FACTOR_X, FACTOR_Y, countdown]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      fontFamily: 'Arial',\n      background: '#222',\n      color: '#fff'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: '10px',\n        fontSize: '1.2em'\n      },\n      children: [\"Balance: $\", balance.toFixed(2), \" | Phase: \", phase]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 7\n    }, this), !userName ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Enter your name:\", /*#__PURE__*/_jsxDEV(\"input\", {\n        value: nameInput,\n        onChange: e => setNameInput(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: setMyName,\n        children: \"Set Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 9\n    }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'flex-start'\n      },\n      children: [userName && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: '200px',\n          marginRight: '20px',\n          padding: '10px',\n          background: '#fff',\n          border: '2px solid orange',\n          borderRadius: '5px',\n          color: '#000'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginBottom: '10px'\n          },\n          children: [\"Bet: $\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            value: bet,\n            min: \"1\",\n            max: balance,\n            style: {\n              width: '60px'\n            },\n            onChange: e => setBet(Math.max(1, Math.min(balance, parseFloat(e.target.value))))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 365,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: placeBet,\n          disabled: phase !== 'waiting' || hasBet,\n          style: {\n            padding: '10px 20px',\n            fontSize: '1em',\n            cursor: phase === 'waiting' && !hasBet ? 'pointer' : 'not-allowed',\n            background: phase === 'waiting' && !hasBet ? '#007bff' : '#6c757d',\n            color: '#fff',\n            border: 'none',\n            borderRadius: '5px',\n            width: '100%',\n            opacity: phase === 'waiting' && !hasBet ? 1 : 0.6\n          },\n          children: \"Place Bet & Join\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        width: CANVAS_WIDTH,\n        height: CANVAS_HEIGHT,\n        style: {\n          border: '2px solid #fff',\n          background: '#333'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 393,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginLeft: '20px',\n          width: '200px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Leaderboard\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 11\n        }, this), leaderboard.map((entry, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [entry.name, \": \", entry.result, \" - $\", entry.money]\n        }, i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 7\n    }, this), phase === 'running' && hasBet && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: cashOut,\n      style: {\n        position: 'fixed',\n        left: '20px',\n        top: '50%',\n        transform: 'translateY(-50%)',\n        padding: '10px 20px',\n        fontSize: '1em',\n        cursor: 'pointer',\n        background: '#28a745',\n        color: '#fff',\n        border: 'none',\n        borderRadius: '5px'\n      },\n      children: \"Cash Out\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 402,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 341,\n    columnNumber: 5\n  }, this);\n}\n_s(CrashGame, \"oWVaTF7AHb+eWyLYTQPN4lQMfjw=\");\n_c = CrashGame;\nexport default CrashGame;\nvar _c;\n$RefreshReg$(_c, \"CrashGame\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","io","CryptoJS","jsxDEV","_jsxDEV","SOCKET_URL","CrashGame","_s","balance","setBalance","bet","setBet","multiplier","setMultiplier","phase","setPhase","countdown","setCountdown","hasBet","setHasBet","userName","setUserName","nameInput","setNameInput","leaderboard","setLeaderboard","recentCrashes","setRecentCrashes","canvasRef","timeRef","particlesRef","socket","lastMultiplierRef","lastUpdateTimeRef","Date","now","crashMultiplier","setCrashMultiplier","roundId","setRoundId","serverSeedHash","setServerSeedHash","revealedServerSeed","setRevealedServerSeed","CANVAS_WIDTH","CANVAS_HEIGHT","SCALE","FACTOR_X","FACTOR_Y","MARGIN","updateParticles","worldX","worldY","current","length","i","push","Math","random","vx","vy","life","on","data","name","newMultiplier","crashPoint","serverSeed","crashes","newBalance","winnings","alert","toFixed","lb","newCountdown","disconnect","t","pow","computedHash","SHA256","toString","enc","Hex","console","error","hmac","HmacSHA256","hash","intValue","parseInt","substr","normalized","computedCrash","abs","log","setMyName","trim","emit","placeBet","cashOut","frameId","animate","ctx","getContext","estimatedMultiplier","endMultiplier","end_t","timeSinceLastUpdate","numPoints","tempTrail","ti","wx","wy","zoomScale","scaleX","scaleY","min","clearRect","beginPath","moveTo","lineTo","strokeStyle","lineWidth","stroke","forEach","point","drawX","drawY","drawRocketX","drawRocketY","arc","PI","fillStyle","fill","p","max","filter","cardWidth","cardHeight","spacing","marginRight","marginTop","numCards","totalWidth","startX","x","y","fillRect","strokeRect","multi","text","font","textWidth","measureText","width","fillText","displayText","textAlign","requestAnimationFrame","cancelAnimationFrame","style","display","flexDirection","alignItems","fontFamily","background","color","children","margin","fontSize","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","onClick","justifyContent","padding","border","borderRadius","marginBottom","type","parseFloat","disabled","cursor","opacity","ref","height","marginLeft","map","entry","result","money","position","left","top","transform","_c","$RefreshReg$"],"sources":["/Users/dylanembry/Projects/crash-game/client/src/CrashGame.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport io from 'socket.io-client';\nimport CryptoJS from 'crypto-js'; // Added for client-side cryptographic verification (install via npm i crypto-js if needed)\n\nconst SOCKET_URL = 'http://localhost:3001';\n\nfunction CrashGame() {\n  const [balance, setBalance] = useState(1000);\n  const [bet, setBet] = useState(10);\n  const [multiplier, setMultiplier] = useState(1);\n  const [phase, setPhase] = useState('waiting');\n  const [countdown, setCountdown] = useState(10);\n  const [hasBet, setHasBet] = useState(false);\n  const [userName, setUserName] = useState('');\n  const [nameInput, setNameInput] = useState('');\n  const [leaderboard, setLeaderboard] = useState([]);\n  const [recentCrashes, setRecentCrashes] = useState([]);\n  const canvasRef = useRef(null);\n  const timeRef = useRef(0);\n  const particlesRef = useRef([]);\n  const socket = useRef(null);\n  const lastMultiplierRef = useRef(1);\n  const lastUpdateTimeRef = useRef(Date.now());\n  const [crashMultiplier, setCrashMultiplier] = useState(0); \n  const [roundId, setRoundId] = useState(0);\n  const [serverSeedHash, setServerSeedHash] = useState('');\n  const [revealedServerSeed, setRevealedServerSeed] = useState('');\n\n  const CANVAS_WIDTH = 840;\n  const CANVAS_HEIGHT = 560;\n  const SCALE = 2;\n  const FACTOR_X = CANVAS_WIDTH / 6;\n  const FACTOR_Y = CANVAS_HEIGHT / 4;\n  const MARGIN = 35;\n\n  const updateParticles = useCallback((worldX, worldY) => {\n    if (phase === 'running' && particlesRef.current.length < 200) {\n      for (let i = 0; i < 4; i++) {\n        particlesRef.current.push({\n          worldX: worldX + (Math.random() - 0.5) * 20,\n          worldY: worldY - 20,\n          vx: (Math.random() - 0.5) * 4,\n          vy: -(2 + Math.random() * 4),\n          life: 1.0,\n        });\n      }\n    }\n  }, [phase]);\n\n  useEffect(() => {\n    socket.current = io(SOCKET_URL);\n\n    socket.current.on('gameUpdate', (data) => {\n      setPhase(data.phase);\n      setMultiplier(data.multiplier);\n      setBalance(data.balance);\n      setCountdown(data.countdown || 0);\n      setUserName(data.name || '');\n    });\n\n    socket.current.on('userUpdate', (data) => {\n      setBalance(data.balance);\n      setUserName(data.name || '');\n    });\n\n    socket.current.on('multiplierUpdate', (newMultiplier) => {\n      setMultiplier(newMultiplier);\n      lastMultiplierRef.current = newMultiplier;\n      lastUpdateTimeRef.current = Date.now();\n    });\n  \n    socket.current.on('waitingPhase', ({ countdown, roundId, serverSeedHash }) => {\n      setPhase('waiting');\n      setMultiplier(1);\n      setCrashMultiplier(0); // Reset for next round\n      lastMultiplierRef.current = 1;\n      lastUpdateTimeRef.current = Date.now();\n      setCountdown(countdown);\n      setHasBet(false);\n      timeRef.current = 0;\n      particlesRef.current = [];\n      setRoundId(roundId);\n      setServerSeedHash(serverSeedHash);\n      setRevealedServerSeed(''); // Reset revealed seed for new round\n    });\n\n    socket.current.on('gameStarted', () => {\n      setPhase('running');\n    });\n\n   \n    socket.current.on('gameCrashed', ({ crashPoint, serverSeed }) => {\n      setPhase('crashed');\n      setCrashMultiplier(crashPoint);\n      setRevealedServerSeed(serverSeed);\n    });\n\n    socket.current.on('recentCrashes', (crashes) => {\n      setRecentCrashes(crashes); // Receive initial crash history from server\n    });\n\n    socket.current.on('recentCrashesUpdate', (crashes) => {\n      setRecentCrashes(crashes); // Update crash history after each crash\n    });\n\n    socket.current.on('balanceUpdate', (newBalance) => setBalance(newBalance));\n    socket.current.on('cashOutSuccess', ({ multiplier, winnings }) => {\n      alert(`Cashed out at ${multiplier.toFixed(2)}x! Won $${winnings.toFixed(2)}`);\n    });\n\n    socket.current.on('leaderboardUpdate', (lb) => setLeaderboard(lb));\n\n    socket.current.on('countdownUpdate', (newCountdown) => {\n      setCountdown(newCountdown);\n    });\n\n    return () => socket.current.disconnect();\n  }, []);\n\n  /*\n   * Handle one-time explosion particle creation when phase changes to 'crashed'.\n   * Particles are added at the fixed crash position based on the crashMultiplier.\n   */\n  useEffect(() => {\n    if (phase === 'crashed') {\n      const t = crashMultiplier - 1;\n      const worldX = t * FACTOR_X;\n      const worldY = Math.pow(t, 1.5) * (FACTOR_Y / 2);\n      for (let i = 0; i < 400; i++) {\n        particlesRef.current.push({\n          worldX: worldX + (Math.random() - 0.5) * 40,\n          worldY: worldY + (Math.random() - 0.5) * 40,\n          vx: (Math.random() - 0.5) * 10,\n          vy: (Math.random() - 0.5) * 10,\n          life: 1.0,\n        });\n      }\n    }\n  }, [phase, crashMultiplier, FACTOR_X, FACTOR_Y]);\n\n  /*\n   * Added provably fair verification logic:\n   * - Triggers after crash when revealedServerSeed is set.\n   * - First, recomputes the SHA-256 hash of the revealed seed and checks if it matches the pre-committed serverSeedHash.\n   * - Then, recomputes the crash point using HMAC-SHA256 (with seed as key, roundId as message).\n   * - Extracts first 8 hex chars as integer, normalizes to [0,1), scales to [1,10).\n   * - Compares the computed crash point to the server-provided crashMultiplier (with floating-point tolerance).\n   * - Logs success or failure to console; in production, this could be shown in UI (e.g., a verification modal).\n   */\n  useEffect(() => {\n    if (phase === 'crashed' && revealedServerSeed) {\n      // Recompute commitment hash\n      const computedHash = CryptoJS.SHA256(revealedServerSeed).toString(CryptoJS.enc.Hex);\n      if (computedHash !== serverSeedHash) {\n        console.error('Verification failed: Hash mismatch!');\n        return;\n      }\n      // Recompute crash point (duplicate of server formula)\n      const hmac = CryptoJS.HmacSHA256(roundId.toString(), revealedServerSeed);\n      const hash = hmac.toString(CryptoJS.enc.Hex);\n      const intValue = parseInt(hash.substr(0, 8), 16);\n      const normalized = intValue / 0xffffffff; // 0xffffffff is 2^32 - 1\n      const computedCrash = 1 + normalized * 9;\n      if (Math.abs(computedCrash - crashMultiplier) > 0.01) {\n        console.error('Verification failed: Crash point mismatch!');\n      } else {\n        console.log('Provably fair verification passed!');\n      }\n    }\n  }, [phase, revealedServerSeed, serverSeedHash, roundId, crashMultiplier]);\n\n  const setMyName = () => {\n    if (nameInput.trim()) {\n      socket.current.emit('setName', nameInput.trim());\n      setNameInput('');\n    }\n  };\n\n  const placeBet = () => {\n    if (phase !== 'waiting' || bet > balance || bet <= 0 || hasBet || !userName) return;\n    socket.current.emit('placeBet', bet);\n    setHasBet(true);\n  };\n\n  const cashOut = () => {\n    if (phase !== 'running' || !hasBet) return;\n    socket.current.emit('cashOut');\n  };\n\n  useEffect(() => {\n    let frameId;\n    const animate = () => {\n      if (!canvasRef.current) return;\n      const ctx = canvasRef.current.getContext('2d');\n\n      let estimatedMultiplier = multiplier;\n      let endMultiplier = multiplier;\n      let end_t = 0;\n\n      if (phase === 'running') {\n        const now = Date.now();\n        const timeSinceLastUpdate = (now - lastUpdateTimeRef.current) / 1000;\n        estimatedMultiplier = lastMultiplierRef.current + (timeSinceLastUpdate * 0.1);\n        endMultiplier = estimatedMultiplier;\n      } else if (phase === 'crashed') {\n        endMultiplier = crashMultiplier;\n      }\n\n      end_t = endMultiplier - 1;\n\n      // Generate trail points on the fly (deterministic curve)\n      const numPoints = 200; // Adjustable; enough for smoothness without performance hit\n      const tempTrail = [];\n      const ti = 0 \n      if (end_t > 0 && (phase === 'running' || phase === 'crashed')) {\n        for (let i = 0; i <= numPoints; i++) {\n          const ti = (i / numPoints) * end_t;\n          const wx = ti * FACTOR_X;\n          const wy = Math.pow(ti, 1.5) * (FACTOR_Y / 2);\n          tempTrail.push({ worldX: wx, worldY: wy });\n        }\n      }\n\n      let worldX = 0;\n      let worldY = 0;\n      if (end_t > 0) {\n        worldX = end_t * FACTOR_X;\n        worldY = Math.pow(ti, 1.5) * (FACTOR_Y / 2);\n      }\n\n      let zoomScale = 1;\n      if (worldX > 0 && worldY > 0) {\n        const scaleX = (CANVAS_WIDTH - MARGIN) / worldX;\n        const scaleY = (CANVAS_HEIGHT - MARGIN) / worldY;\n        zoomScale = Math.min(1, Math.min(scaleX, scaleY));\n      }\n\n      ctx.clearRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n      ctx.beginPath();\n      ctx.moveTo(0, CANVAS_HEIGHT);\n      ctx.lineTo(CANVAS_WIDTH, CANVAS_HEIGHT);\n      ctx.moveTo(0, CANVAS_HEIGHT);\n      ctx.lineTo(0, 0);\n      ctx.strokeStyle = '#fff';\n      ctx.lineWidth = SCALE * zoomScale;\n      ctx.stroke();\n\n      // Draw the trail using tempTrail\n      ctx.beginPath();\n      ctx.strokeStyle = '#fff';\n      ctx.lineWidth = 4 * zoomScale;\n      tempTrail.forEach((point, i) => {\n        const drawX = point.worldX * zoomScale;\n        const drawY = CANVAS_HEIGHT - point.worldY * zoomScale;\n        if (i === 0) ctx.moveTo(drawX, drawY);\n        else ctx.lineTo(drawX, drawY);\n      });\n      ctx.stroke();\n\n      // Draw rocket only if running (at end position)\n      if (phase === 'running') {\n        const drawRocketX = worldX * zoomScale;\n        const drawRocketY = CANVAS_HEIGHT - worldY * zoomScale;\n        ctx.beginPath();\n        ctx.arc(drawRocketX, drawRocketY, 10 * zoomScale, 0, Math.PI * 2);\n        ctx.fillStyle = '#fff';\n        ctx.fill();\n      }\n\n      particlesRef.current.forEach(p => {\n        const drawX = p.worldX * zoomScale;\n        const drawY = CANVAS_HEIGHT - p.worldY * zoomScale;\n        ctx.beginPath();\n        ctx.arc(drawX, drawY, Math.max(0, 6 * p.life) * zoomScale, 0, Math.PI * 2);\n        ctx.fillStyle = `rgba(255, 128, 0, ${Math.max(0, p.life)})`;\n        ctx.fill();\n      });\n\n      if (phase === 'running') {\n        updateParticles(worldX, worldY);\n      }\n\n      particlesRef.current.forEach(p => {\n        p.worldX += p.vx;\n        p.worldY += p.vy;\n        p.life -= 0.02;\n      });\n      particlesRef.current = particlesRef.current.filter(p => p.life > 0);\n\n      // Draw recent crash cards\n      const cardWidth = 42;\n      const cardHeight = 17.5;\n      const spacing = 7;\n      const marginRight = 7;\n      const marginTop = 7;\n      const numCards = recentCrashes.length;\n      const totalWidth = numCards * cardWidth + (numCards - 1) * spacing;\n      let startX = CANVAS_WIDTH - totalWidth - marginRight;\n      for (let i = 0; i < numCards; i++) {\n        const x = startX + i * (cardWidth + spacing);\n        const y = marginTop;\n        ctx.fillStyle = 'white';\n        ctx.fillRect(x, y, cardWidth, cardHeight);\n        ctx.strokeStyle = 'orange';\n        ctx.lineWidth = 1.4;\n        ctx.strokeRect(x, y, cardWidth, cardHeight);\n        const multi = recentCrashes[i];\n        const text = `${multi.toFixed(2)}x`;\n        ctx.font = '10px Arial';\n        ctx.fillStyle = 'green';\n        const textWidth = ctx.measureText(text).width;\n        ctx.fillText(text, x + (cardWidth - textWidth)/2, y + cardHeight/2 + 3.5);\n      }\n\n      // Draw the dynamic text (multiplier or countdown) in the middle of the canvas\n      let displayText = '';\n      if (phase === 'running') {\n        displayText = `${estimatedMultiplier.toFixed(2)}x`;\n      } else if (phase === 'crashed') {\n        displayText = `Crashed at ${crashMultiplier.toFixed(2)}x`;\n      } else if (phase === 'waiting') {\n        displayText = `${countdown}s`;\n      }\n\n      if (displayText) {\n        ctx.font = 'bold 48px Arial';\n        ctx.fillStyle = phase === 'crashed' ? '#ff0000' : '#ffffff'; // Red for crashed, white otherwise\n        ctx.textAlign = 'center';\n        ctx.fillText(displayText, CANVAS_WIDTH / 2, CANVAS_HEIGHT / 2);\n      }\n\n      frameId = requestAnimationFrame(animate);\n    };\n\n    frameId = requestAnimationFrame(animate);\n\n    return () => cancelAnimationFrame(frameId);\n  }, [phase, multiplier, crashMultiplier, updateParticles, recentCrashes, FACTOR_X, FACTOR_Y, countdown]);\n\n  return (\n    <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', fontFamily: 'Arial', background: '#222', color: '#fff' }}>\n      <div style={{ margin: '10px', fontSize: '1.2em' }}>\n        Balance: ${balance.toFixed(2)} | Phase: {phase}\n      </div>\n      {!userName ? (\n        <div>\n          Enter your name:\n          <input value={nameInput} onChange={(e) => setNameInput(e.target.value)} />\n          <button onClick={setMyName}>Set Name</button>\n        </div>\n      ) : null}\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'flex-start' }}>\n        {userName && (\n          <div style={{ \n            width: '200px', \n            marginRight: '20px', \n            padding: '10px', \n            background: '#fff', \n            border: '2px solid orange', \n            borderRadius: '5px', \n            color: '#000' \n          }}>\n            <div style={{ marginBottom: '10px' }}>\n              Bet: $\n              <input\n                type=\"number\"\n                value={bet}\n                min=\"1\"\n                max={balance}\n                style={{ width: '60px' }}\n                onChange={(e) => setBet(Math.max(1, Math.min(balance, parseFloat(e.target.value))))}\n              />\n            </div>\n            <button \n              onClick={placeBet} \n              disabled={phase !== 'waiting' || hasBet}\n              style={{\n                padding: '10px 20px',\n                fontSize: '1em',\n                cursor: phase === 'waiting' && !hasBet ? 'pointer' : 'not-allowed',\n                background: phase === 'waiting' && !hasBet ? '#007bff' : '#6c757d',\n                color: '#fff',\n                border: 'none',\n                borderRadius: '5px',\n                width: '100%',\n                opacity: phase === 'waiting' && !hasBet ? 1 : 0.6\n              }}\n            >\n              Place Bet & Join\n            </button>\n          </div>\n        )}\n        <canvas ref={canvasRef} width={CANVAS_WIDTH} height={CANVAS_HEIGHT} style={{ border: '2px solid #fff', background: '#333' }} />\n        <div style={{ marginLeft: '20px', width: '200px' }}>\n          <h3>Leaderboard</h3>\n          {leaderboard.map((entry, i) => (\n            <div key={i}>{entry.name}: {entry.result} - ${entry.money}</div>\n          ))}\n        </div>\n      </div>\n      {phase === 'running' && hasBet && (\n        <button onClick={cashOut} style={{\n          position: 'fixed',\n          left: '20px',\n          top: '50%',\n          transform: 'translateY(-50%)',\n          padding: '10px 20px',\n          fontSize: '1em',\n          cursor: 'pointer',\n          background: '#28a745',\n          color: '#fff',\n          border: 'none',\n          borderRadius: '5px',\n        }}>\n          Cash Out\n        </button>\n      )}\n    </div>\n  );\n}\n\nexport default CrashGame;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}